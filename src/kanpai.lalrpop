use std::str::FromStr;
use crate::ast::*;

grammar;

pub Statement: Statement = {
  "let" <i: Ident> "in" => Statement::Variable(i),
  "unify" <l: ConstantOrIdent> "=" <r: ConstantOrIdent> "in" => Statement::Unify(l, r),
  "possible" <i: Ident> => Statement::Possible(i),
}

ConstantOrIdent: ConstantOrIdent = {
  <l:Literal> => ConstantOrIdent::Constant(l),
  <i:Ident> => ConstantOrIdent::Ident(i),
}

pub Program: Program = {
  <ss:Statement*> => {
    let mut p = Program::default();
    for s in ss {
      if let Err(e) = p.lower(s) {
        panic!("Failed to lower statement {:?}", e);
      };
    }
    p
  }
}

Ident: Ident = <s:r"[A-Za-z][A-Za-z0-9]*"> => Ident(s.to_string());
Literal: Literal = {
  <s:r"[0-9]+"> => Literal::I32(i32::from_str(s).unwrap()),
}
