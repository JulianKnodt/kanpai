use std::str::FromStr;
use crate::ast::*;

grammar;

pub Statement: Statement = {
  "let" <i: Ident> "in" => Statement::Variable(i, TyKind::Dynamic),

  "let" <i: Ident> ":" <t:TyKind> "in" => Statement::Variable(i, t),

  "constraint" <l: LiteralOrIdent> "=" <r: LiteralOrIdent> "in" => Statement::Unify(l, r),
  "possible" <i: Ident> => Statement::Possible(i),
}

TyKind: TyKind = {
  "Text" => TyKind::Text,
  "Number" => TyKind::Number,
  // <a:TyKind> "|" <b: TyKind> => TyKind::Enum(a, b)
  <i:Ident> => todo!(),
}

LiteralOrIdent: LiteralOrIdent = {
  <l:Literal> => LiteralOrIdent::Literal(l),
  <i:Ident> => LiteralOrIdent::Ident(i),
}

pub Program: Program = {
  <ss:Statement*> => {
    let mut p = Program::default();
    for s in ss {
      if let Err(e) = p.lower(s) {
        panic!("Failed to lower statement {:?}", e);
      };
    }
    p
  }
}

Ident: Ident = <s:r"[A-Za-z][A-Za-z0-9]*"> => Ident(s.to_string());
Literal: Literal = {
  <s:r"[0-9]+"> => Literal::I32(i32::from_str(s).unwrap()),
  "\"" <s:"*"> "\"" => Literal::Str(s.to_string()),
}

