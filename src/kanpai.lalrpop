use std::str::FromStr;
use crate::ast::*;

grammar;

pub Statement: Statement = {
  "let" <i: Ident> <t: TyAnnotation?> "in" => Statement::Variable(i, t.unwrap_or(Ty::all())),

  "constrain" <l: LiteralOrIdent> <c: ConstraintKind> <r: LiteralOrIdent> "in" =>
    Statement::Constrain(c, l, r),
  "possible" <i: Ident> => Statement::Possible(i),

  "for" "all" <t: TyAnnotation?> "->" <to: Ty> =>
    Statement::ForAll(t.unwrap_or(Ty::all()), to),
  "thus" <i: Ident> <t: TyAnnotation?> =>
    Statement::Thus(i, t.unwrap_or(Ty::all())),
}

TyAnnotation: Ty = {
  ":" <t: Ty> => t,
}

ConstraintKind: ConstraintKind = {
  "=" => ConstraintKind::Eq,
  "!=" => ConstraintKind::Neq,
}

Ty: Ty = {
  <t:TyKind> => Ty::from(t),
  <l:Literal> => Ty::from_literal(l),
}

TyKind: TyKind = {
  "Text" => TyKind::Text,
  "Number" => TyKind::Number,
  "Bool" => TyKind::Bool,
  "*" => TyKind::Dynamic,
  "!" => TyKind::Never,

  <i:Ident> => TyKind::Param(LowerableIdent::Ident(i)),

  "(" <l:Ty> "," <r:Ty> ")" => TyKind::Tuple(box l, box r),
  "(" <l:Ty> "|" <r:Ty> ")" => TyKind::Enum(box l, box r),

}

LiteralOrIdent: LiteralOrIdent = {
  <l:Literal> => LiteralOrIdent::Literal(l),
  <i:Ident> => LiteralOrIdent::Ident(i),
}

pub Program: Program = {
  <ss:Statement*> => {
    let mut p = Program::default();
    for s in ss {
      if let Err(e) = p.lower(s) {
        panic!("Failed to lower statement {:?}", e);
      };
    }
    p
  }
}

Ident: Ident = <s:r"[A-Za-z][A-Za-z0-9]*"> => Ident(s.to_string());

Literal: Literal = {
  "true" => Literal::Bool(true),
  "false" => Literal::Bool(false),
  <s:r"[0-9]+"> => Literal::I32(i32::from_str(s).unwrap()),
  <s:r#""[^"]*""#> => Literal::Str(s.to_string()),
}

